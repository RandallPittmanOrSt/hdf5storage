[project]
name = "hdf5storage"
version = "0.2"
description = "Utilities to read/write Python types to/from HDF5 files, including MATLAB v7.3 MAT files."
readme = "README.rst"
authors = [{ name = "Freja Nordsiek", email = "fnordsie@posteo.net" }]
license = { text = "BSD" }
keywords = ["hdf5", "matlab"]
classifiers = [
    "Programming Language :: Python :: 3 :: Only",
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.11"
dependencies = ["numpy (>=1.26)", "h5py>=3.3"]

[tool.poetry.group.dev.dependencies]
pytest = ">=8.3"
sphinx = ">=8.0"
sphinx_rtd_theme = ">=3.0"
ruff = ">=0.9"

[[tool.poetry.source]]
name = "relativity"
url = "https://artifactory.relspace.net/artifactory/api/pypi/pypi/simple/"
priority = "primary"


[tool.ruff]
line-length = 120
target-version = "py311"
exclude = [ # Patterns are glob expressions
]
lint.select = ["ALL"]
lint.ignore = [
    "FBT",     # Boolean traps
    "PLR2004", # constant value
    "T201",    # Allow print
    "TD002",   # No author on TODO
    "TD003",   # No ticket on TODO
    "FIX",     # All fixme types (aka, you can have TODOs and FIXMEs in your code.
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "COM812", # missing-trailing-comma
    "ISC001", # single-line-implicit-string-concatenation
]

lint.unfixable = [
    "B007",    # Don't modify unused loop control variable
    "F401",    # Don't delete unused imports
    "F841",    # Don't delete unused variables
    "ERA001",  # Don't delete commented out code
    "PERF102", # Don't auto-convert .items() to .values()
]


[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "ANN201", # Allow no return types in tests.
    "S101",   # Allow asserts in tests.
    "D100",   # Don't require docstring in test modules
    "D103",   # Don't require docstring in test functions
    "D104",   # Don't require docstrings in test packages.
    "ANN001", # Allow no function argument type annotations
    "INP001", # Do not require __init__.py module
]
"docs/**/__init__.py" = [
    "D104", # Don't require docstrings in documentation.
]

[tool.ruff.lint.pydocstyle]
convention = "numpy" # Accepts: "google", "numpy", or "pep257".

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
